From: Jason Rhinelander <jason@imaginary.ca>
Date: Mon, 13 Jun 2022 20:50:18 -0300
Subject: Build newer sqlite3 for bionic

---
 external/CMakeLists.txt | 47 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 47 insertions(+)

diff --git a/external/CMakeLists.txt b/external/CMakeLists.txt
index c7efd13..7c6e609 100644
--- a/external/CMakeLists.txt
+++ b/external/CMakeLists.txt
@@ -152,6 +152,53 @@ else()
 endif()
 
 
+# Bionic's sqlite3 is too old for the INSERT ... ON CONFLICT ... query that we use, so build a more
+# recent static version.
+include(ExternalProject)
+
+set(SQLITE3_VERSION "3380500" CACHE STRING "sqlite3 version")
+set(SQLITE3_MIRROR ${LOCAL_MIRROR} https://www.sqlite.org/2022
+    CACHE STRING "sqlite3 download mirror(s)")
+set(SQLITE3_SOURCE sqlite-autoconf-${SQLITE3_VERSION}.tar.gz)
+set(SQLITE3_HASH SHA512=6f515a7782bfb5414702721fc78ada5bf388f4bf8b3e3c2ec269df33a2e372859f682d028c30084e89847705c7050ea80790d51fbcc4decea8fbb0a35b89c0b3
+    CACHE STRING "sqlite3 source hash")
+
+if(SQLITE3_VERSION MATCHES "^([0-9]+)(0([0-9])|([1-9][0-9]))(0([0-9])|([1-9][0-9]))[0-9][0-9]$")
+    set(SQLite3_VERSION "${CMAKE_MATCH_1}.${CMAKE_MATCH_3}${CMAKE_MATCH_4}.${CMAKE_MATCH_6}${CMAKE_MATCH_7}" CACHE STRING "" FORCE)
+    mark_as_advanced(SQLite3_VERSION)
+    message(STATUS "Building static sqlite3 ${SQLite3_VERSION}")
+else()
+    message(FATAL_ERROR "Couldn't figure out sqlite3 version from '${SQLITE3_VERSION}'")
+endif()
+
+set(sqlite_urls)
+foreach(mirror ${SQLITE3_MIRROR})
+  list(APPEND sqlite_urls "${mirror}/${SQLITE3_SOURCE}")
+endforeach()
+
+set(deps_cc "${CMAKE_C_COMPILER}")
+if(CMAKE_C_COMPILER_LAUNCHER)
+  set(deps_cc "${CMAKE_C_COMPILER_LAUNCHER} ${deps_cc}")
+endif()
+set(deps_CFLAGS "-O2 -flto")
+
+file(MAKE_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/sqlite3/include ${CMAKE_CURRENT_BINARY_DIR}/sqlite3/lib)
+ExternalProject_Add(sqlite3_external
+  BUILD_IN_SOURCE ON
+  PREFIX ${CMAKE_CURRENT_BINARY_DIR}/sqlite3
+  URL ${sqlite_urls}
+  URL_HASH ${SQLITE3_HASH}
+  DOWNLOAD_NO_PROGRESS ON
+  CONFIGURE_COMMAND ./configure --disable-shared --prefix=${CMAKE_CURRENT_BINARY_DIR}/sqlite3 --with-pic "CC=${deps_cc}" "CFLAGS=${deps_CFLAGS}"
+  BUILD_COMMAND true
+  INSTALL_COMMAND make install-includeHEADERS install-libLTLIBRARIES
+  BUILD_BYPRODUCTS ${CMAKE_CURRENT_BINARY_DIR}/sqlite3/lib/libsqlite3.a ${CMAKE_CURRENT_BINARY_DIR}/sqlite3/include/sqlite3.h
+  )
+add_library(SQLite::SQLite3 STATIC IMPORTED GLOBAL)
+add_dependencies(SQLite::SQLite3 sqlite3_external)
+set_target_properties(SQLite::SQLite3 PROPERTIES IMPORTED_LOCATION ${CMAKE_CURRENT_BINARY_DIR}/sqlite3/lib/libsqlite3.a)
+target_include_directories(SQLite::SQLite3 INTERFACE ${CMAKE_CURRENT_BINARY_DIR}/sqlite3/include)
+
 # Hack around SQLiteCpp's attempts to locate sqlite3 because we *don't* want to link against the
 # system one, but don't download and build the embedded one until build time.  Thankfully it
 # actually links against the SQLite::SQLite3 cmake target if it already exists, so all we have to do
